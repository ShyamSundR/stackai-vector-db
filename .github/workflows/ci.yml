name: 🧪 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  COHERE_API_KEY: "test_dummy_key_for_ci"
  COHERE_MODEL: "embed-english-v3.0"

jobs:
  lint:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy
    
    - name: 🎨 Check code formatting with Black
      run: black --check --diff .
      continue-on-error: true
    
    - name: 📏 Check import sorting with isort
      run: isort --check-only --diff .
      continue-on-error: true
    
    - name: 🔍 Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: 🔬 Type checking with mypy
      run: mypy app/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: 🧪 Run unit tests with coverage
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
      env:
        COHERE_API_KEY: ${{ env.COHERE_API_KEY }}
        COHERE_MODEL: ${{ env.COHERE_MODEL }}
      continue-on-error: true

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: 🚀 Start API server in background
      run: |
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 5  # Give server time to start
      env:
        COHERE_API_KEY: ${{ env.COHERE_API_KEY }}
        COHERE_MODEL: ${{ env.COHERE_MODEL }}
    
    - name: 🔍 Wait for API to be ready
      run: |
        for i in {1..30}; do
          if curl -f http://localhost:8000/health; then
            echo "API is ready!"
            break
          fi
          echo "Waiting for API... (attempt $i/30)"
          sleep 2
        done
    
    - name: 🧪 Run API integration tests
      run: python test_api.py
      env:
        COHERE_API_KEY: ${{ env.COHERE_API_KEY }}
        COHERE_MODEL: ${{ env.COHERE_MODEL }}
      continue-on-error: true

  docker-tests:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔨 Build Docker image
      run: |
        docker build -t stackai:test .
    
    - name: 🚀 Run Docker container
      run: |
        docker run -d --name stackai-test \
          -p 8000:8000 \
          -e COHERE_API_KEY=${{ env.COHERE_API_KEY }} \
          -e COHERE_MODEL=${{ env.COHERE_MODEL }} \
          stackai:test
    
    - name: 🔍 Wait for container to be ready
      run: |
        for i in {1..30}; do
          if curl -f http://localhost:8000/health; then
            echo "Docker container is ready!"
            break
          fi
          echo "Waiting for Docker container... (attempt $i/30)"
          sleep 2
        done
    
    - name: 🧪 Test Docker deployment
      run: |
        # Test health endpoint
        curl -f http://localhost:8000/health
        
        # Test basic API functionality
        LIBRARY_RESPONSE=$(curl -s -X POST http://localhost:8000/api/v1/libraries/ \
          -H "Content-Type: application/json" \
          -d '{"name": "Docker Test Library", "metadata": {"description": "Test from CI"}}')
        
        echo "Library creation response: $LIBRARY_RESPONSE"
      continue-on-error: true
    
    - name: 📋 Show container logs
      if: always()
      run: docker logs stackai-test
    
    - name: 🧹 Cleanup
      if: always()
      run: |
        docker stop stackai-test || true
        docker rm stackai-test || true 