name: 🧪 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  COHERE_API_KEY: "test_dummy_key_for_ci"
  COHERE_MODEL: "embed-english-v3.0"

jobs:
  lint:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy
    
    - name: 🎨 Check code formatting with Black
      run: black --check --diff .
    
    - name: 📏 Check import sorting with isort
      run: isort --check-only --diff .
    
    - name: 🔍 Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 🔬 Type checking with mypy
      run: mypy app/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # Don't fail CI for type issues yet

  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: 🧪 Run unit tests with coverage
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
      env:
        COHERE_API_KEY: ${{ env.COHERE_API_KEY }}
        COHERE_MODEL: ${{ env.COHERE_MODEL }}
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    
    services:
      # We could add databases here if needed
      # postgres:
      #   image: postgres:15
      #   env:
      #     POSTGRES_PASSWORD: postgres
      #   options: >-
      #     --health-cmd pg_isready
      #     --health-interval 10s
      #     --health-timeout 5s
      #     --health-retries 5
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: 🚀 Start API server in background
      run: |
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 5  # Give server time to start
      env:
        COHERE_API_KEY: ${{ env.COHERE_API_KEY }}
        COHERE_MODEL: ${{ env.COHERE_MODEL }}
    
    - name: 🔍 Wait for API to be ready
      run: |
        for i in {1..30}; do
          if curl -f http://localhost:8000/health; then
            echo "API is ready!"
            break
          fi
          echo "Waiting for API... (attempt $i/30)"
          sleep 2
        done
    
    - name: 🧪 Run API integration tests
      run: python test_api.py
      env:
        COHERE_API_KEY: ${{ env.COHERE_API_KEY }}
        COHERE_MODEL: ${{ env.COHERE_MODEL }}
    
    - name: 🧪 Run metadata filtering tests
      run: python test_metadata_filtering.py
      env:
        COHERE_API_KEY: ${{ env.COHERE_API_KEY }}
        COHERE_MODEL: ${{ env.COHERE_MODEL }}
    
    - name: 🧪 Run SDK tests
      run: |
        cd stackai_sdk/examples
        python basic_usage.py
      env:
        COHERE_API_KEY: ${{ env.COHERE_API_KEY }}
        COHERE_MODEL: ${{ env.COHERE_MODEL }}

  docker-tests:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔨 Build Docker image
      run: |
        docker build -t stackai:test .
    
    - name: 🚀 Run Docker container
      run: |
        docker run -d --name stackai-test \
          -p 8000:8000 \
          -e COHERE_API_KEY=${{ env.COHERE_API_KEY }} \
          -e COHERE_MODEL=${{ env.COHERE_MODEL }} \
          stackai:test
    
    - name: 🔍 Wait for container to be ready
      run: |
        for i in {1..30}; do
          if curl -f http://localhost:8000/health; then
            echo "Docker container is ready!"
            break
          fi
          echo "Waiting for Docker container... (attempt $i/30)"
          sleep 2
        done
    
    - name: 🧪 Test Docker deployment
      run: |
        # Test health endpoint
        curl -f http://localhost:8000/health
        
        # Test basic API functionality
        LIBRARY_RESPONSE=$(curl -s -X POST http://localhost:8000/api/v1/libraries/ \
          -H "Content-Type: application/json" \
          -d '{"name": "Docker Test Library", "metadata": {"description": "Test from CI"}}')
        
        echo "Library creation response: $LIBRARY_RESPONSE"
        
        # Extract library ID and test retrieval
        LIBRARY_ID=$(echo $LIBRARY_RESPONSE | python -c "import sys, json; print(json.load(sys.stdin)['id'])")
        curl -f http://localhost:8000/api/v1/libraries/$LIBRARY_ID
    
    - name: 📋 Show container logs
      if: always()
      run: docker logs stackai-test
    
    - name: 🧹 Cleanup
      if: always()
      run: |
        docker stop stackai-test || true
        docker rm stackai-test || true

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: 🔍 Check for known security vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check --json || true  # Don't fail CI for now
    
    - name: 🔒 Run Bandit security linter
      run: |
        bandit -r app/ -f json || true  # Don't fail CI for now

  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
    
    - name: 🚀 Start API server
      run: |
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 5
      env:
        COHERE_API_KEY: ${{ env.COHERE_API_KEY }}
        COHERE_MODEL: ${{ env.COHERE_MODEL }}
    
    - name: ⚡ Run basic performance test
      run: |
        # Simple load test using curl
        echo "Running basic load test..."
        for i in {1..10}; do
          curl -s -o /dev/null -w "%{http_code}\n" http://localhost:8000/health
        done
        echo "Basic load test completed"

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, docker-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "✅ Staging deployment completed"
        # Here you would add actual deployment steps
        # e.g., deploy to AWS, GCP, Azure, etc.

  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, docker-tests, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://your-production-url.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🏭 Deploy to production
      run: |
        echo "🏭 Deploying to production environment..."
        echo "✅ Production deployment completed"
        # Here you would add actual production deployment steps

  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, docker-tests]
    if: always()
    
    steps:
    - name: 🧹 Cleanup artifacts
      run: |
        echo "🧹 Cleaning up CI artifacts..."
        echo "✅ Cleanup completed" 